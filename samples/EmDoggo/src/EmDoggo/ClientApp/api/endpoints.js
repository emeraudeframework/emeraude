// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Emeraude Client Builder.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

import './types';

export class DogsServiceAgent {

    /**
     * DogsApiController/AddDog
     * @param {AddDogCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<MutationResult>}
     */
    addDog(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/dogs/add`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify(request),
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
    }
}

export class EmptyServiceAgent {

    /**
     * EmptyApiController/ExampleAction
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<SimpleResult>}
     */
    exampleAction(queryParams = null, headers = null) { 
        let url = new URL(`/api/empty/example`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
    }

    /**
     * EmptyApiController/ComplexRequestTypeAction
     * @param {ComplexRequestCommand} request
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<ComplexRequestResult>}
     */
    complexRequestTypeAction(request, queryParams = null, headers = null) { 
        let url = new URL(`/api/empty/complex`, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
    }
}

/**
 * @type {DogsServiceAgent}
 */
const dogsServiceAgent = new DogsServiceAgent();

/**
 * @type {EmptyServiceAgent}
 */
const emptyServiceAgent = new EmptyServiceAgent();

export {
  dogsServiceAgent,
  emptyServiceAgent,
}
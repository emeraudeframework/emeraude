<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Definux.Emeraude.ClientBuilder.Models" #>
<#@ import namespace="Definux.Emeraude.ClientBuilder.Shared" #>
<#@ import namespace="Definux.Utilities.Extensions" #>
<#@ import namespace="Definux.Emeraude.ClientBuilder.Shared" #>
<#=ClientBuilderConstants.AutoGeneratedHeaderText #>

import './types';
<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>

export class <#=controller.Replace("ApiController", string.Empty)#>ServiceAgent {
<# foreach (var endpoint in ((List<Endpoint>)Session["Endpoints"]).Where(x => x.ControllerName == controller).ToList()) { #>

    /**
     * <#=endpoint.ControllerName#>/<#=endpoint.ActionName#>
<#if (endpoint.Arguments.Count > 0) {foreach (var argument in endpoint.Arguments) { #>
     * @param {<#=argument.Type.JavaScriptTypeName#>} <#=argument.Name#>
<#}#>
<#}#>
     * @param {Object} queryParams
     * @param {Object} headers
     * @returns {Promise<<#=endpoint.Response.Type.JavaScriptTypeName#>>}
     */
    <#=endpoint.ActionName.ToFirstLower()#>(<#=endpoint.ArgumentsListString#><#=string.IsNullOrEmpty(endpoint.ArgumentsListString) ? "" : ", "#>queryParams = null, headers = null) {<# var requestUrl = "`" + endpoint.Route.Replace("{", "${") + "`";#> 
        let url = new URL(<#=requestUrl#>, window.location.origin);
        if (queryParams != null) {
            url.search = new URLSearchParams(queryParams).toString();
        }
<#if (endpoint.MethodName.ToUpper() == "GET") {#>
        return fetch(url, {
            method: 'GET',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
<#}#>
<#if (endpoint.MethodName.ToUpper() == "POST") {#>
        return fetch(url, {
            method: 'POST',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: <#if (!string.IsNullOrEmpty(endpoint.ArgumentsListString)) { #>JSON.stringify(<#=endpoint.ComplexArgument.Name#>)<# } else {#>null<#}#>,
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
<#}#>
<#if (endpoint.MethodName.ToUpper() == "PUT") {#>
        return fetch(url, {
            method: 'PUT',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: <#if (!string.IsNullOrEmpty(endpoint.ArgumentsListString)) { #>JSON.stringify(<#=endpoint.ComplexArgument.Name#>)<# } else {#>null<#}#>,
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
<#}#>
<#if (endpoint.MethodName.ToUpper() == "DELETE") {#>
        return fetch(url, {
            method: 'DELETE',
            headers: headers || { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            credentials: 'include'
        })
            .then(async response => {
                const responseJson = response.json();
                if (response.ok) {
                    return responseJson;
                }

                return {
                    succeeded: false,
                    error: await responseJson
                }
            });
<#}#>
    }
<# } #>
}
<# } #>
<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>

/**
 * @type {<#=controller.Replace("ApiController", string.Empty)#>ServiceAgent}
 */
const <#=controller.Replace("ApiController", string.Empty).ToFirstLower()#>ServiceAgent = new <#=controller.Replace("ApiController", string.Empty)#>ServiceAgent();
<# } #>

export {
<# foreach (var controller in (List<string>)Session["EndpointsControllers"]) { #>
  <#=controller.Replace("ApiController", string.Empty).ToFirstLower()#>ServiceAgent,
<# } #>
}
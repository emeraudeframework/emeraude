@* @using Definux.Emeraude.Application.Admin.UI.Adapters *@
@* @using Definux.Emeraude.Configuration.Options *@
@* @using Microsoft.AspNetCore.Hosting *@
@* @inject IAdminMenusBuilder AdminMenusBuilder *@
@* @inject NavigationManager NavigationManager *@
@* @inject IEmOptionsProvider OptionsProvider *@
@* @inject IHostingEnvironment HostingEnvironment *@
@* *@
@* <nav class="sidebar sidebar-offcanvas" id="sidebar"> *@
@*     <ul class="nav"> *@
@*         <li class="nav-item nav-profile"> *@
@*             <div class="nav-link"> *@
@*                 <div class="dropdown"> *@
@*                     <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownAppInstance" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Application Insights</button> *@
@*                     <div class="dropdown-menu mt-2 p-2" aria-labelledby="dropdownAppInstance"> *@
@*                         <a class="dropdown-item pt-2 pb-2 pl-1" target="_blank" href="/"><i class="mr-2 mdi mdi-home"></i> Home Page</a> *@
@*                         $1$ @if (navigationScheme.InsightsItems != null && navigationScheme.InsightsItems.Count > 0) #1# *@
@*                         $1$ { #1# *@
@*                         $1$     <div class="dropdown-divider"></div> #1# *@
@*                         $1$     foreach (var item in navigationScheme.InsightsItems) #1# *@
@*                         $1$     { #1# *@
@*                         $1$         string targetBlank = item.Blank ? "target=\"_blank\"" : string.Empty; #1# *@
@*                         $1$         string iconMargin = item.IsButton ? string.Empty : " mr-2"; #1# *@
@*                         $1$         string icon = !string.IsNullOrWhiteSpace(item.Icon) ? $"<i class=\"{item.Icon}{iconMargin}\"></i> " : string.Empty; #1# *@
@*                         $1$         if (!item.IsButton) #1# *@
@*                         $1$         { #1# *@
@*                         $1$             <a class="dropdown-item pt-2 pb-2 ps-1" href="@item.Route" @targetBlank>@((MarkupString)icon)@item.Title</a> #1# *@
@*                         $1$         } #1# *@
@*                         $1$         else #1# *@
@*                         $1$         { #1# *@
@*                         $1$             <a class="btn btn-primary btn-block d-block" href="@item.Route" @targetBlank>@((MarkupString)icon)@item.Title</a> #1# *@
@*                         $1$         } #1# *@
@*                         $1$     } #1# *@
@*                         $1$ } #1# *@
@*                         <div class="dropdown-divider"></div> *@
@*                         <span class="dropdown-header">SEO</span> *@
@*                         <a class="dropdown-item pt-2 pb-2 ps-1" target="_blank" href="/robots.txt"><i class="me-2 mdi mdi-robot"></i> robots.txt</a> *@
@*                         <a class="dropdown-item pt-2 pb-2 ps-1" target="_blank" href="/sitemap.xml"><i class="me-2 mdi mdi-sitemap"></i> Sitemap</a> *@
@*                         $1$ <for-permission permission="@AdminPermissions.AccessLogs"> #1# *@
@*                         $1$     <div class="dropdown-divider"></div> #1# *@
@*                         $1$     <span class="dropdown-header">Logging</span> #1# *@
@*                         $1$     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/activity"><i class="mr-2 mdi mdi-cursor-default-click"></i> Activity</a> #1# *@
@*                         $1$     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/errors"><i class="mr-2 mdi mdi-bug"></i> Errors</a> #1# *@
@*                         $1$     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/emails"><i class="mr-2 mdi mdi-email"></i> Emails</a> #1# *@
@*                         $1$     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/temp-files"><i class="mr-2 mdi mdi-file-upload"></i> Temp Files</a> #1# *@
@*                         $1$ </for-permission> #1# *@
@*                         @if (HostingEnvironment.IsDevelopment()) *@
@*                         { *@
@*                             <div class="dropdown-divider"></div> *@
@*                             <span class="dropdown-header">Development</span> *@
@*                             <a class="dropdown-item pt-2 pb-2 pl-1" href="https://emeraude.dev/" target="_blank"><i class="mr-2 mdi mdi-file-document"></i> Documentation</a> *@
@*                             if (OptionsProvider.GetOptionValue<bool>("ClientBuilderOptions:EnableClientBuilder")) *@
@*                             { *@
@*                                 <div class="dropdown-divider"></div> *@
@*                                 <a href="/admin/client-builder/scaffold" class="btn btn-primary btn-block d-block">Client Builder</a> *@
@*                             } *@
@*                         } *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </li> *@
@*         @{ *@
@*              *@
@*             int sectionIndex = 1; *@
@*             foreach (var menuSection in navigationScheme.Menus) *@
@*             { *@
@*                 <EmMenuSection MenuSection="menuSection" Index="sectionIndex"/> *@
@*                 sectionIndex++; *@
@*             } *@
@*         } *@
@*         <li class="nav-item main-nav-item"> *@
@*             <a id="sidebar-collapse-btn" href="javascript:void(0)" class="nav-link" data-bs-toggle="minimize" title="Collapse Menu"><i class="menu-icon mdi mdi-arrow-left-drop-circle"></i><span class="menu-title">Collapse Menu</span></a> *@
@*         </li> *@
@*     </ul> *@
@* </nav> *@
@* *@
@* @code { *@
@*     private bool collapseNavMenu = true; *@
@* *@
@*     private string NavMenuCssClass => collapseNavMenu ? "collapse" : null; *@
@* *@
@*     private AdminNavigationSchema navigationScheme; *@
@* *@
@*     private void ToggleNavMenu() *@
@*     { *@
@*         collapseNavMenu = !collapseNavMenu; *@
@*     } *@
@* *@
@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         await base.OnInitializedAsync(); *@
@*         NavigationManager.LocationChanged += (_, args) => this.navigationScheme.ChangeNavigationState(NavigationManager.ToBaseRelativePath(args.Location)); *@
@*         this.navigationScheme = await this.AdminMenusBuilder.BuildAsync(); *@
@*         this.navigationScheme.ChangeNavigationState(NavigationManager.ToBaseRelativePath(NavigationManager.Uri)); *@
@*     } *@
@* } *@
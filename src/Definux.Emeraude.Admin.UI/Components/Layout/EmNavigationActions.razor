@inject NavigationActionsModule NavigationActionsModule
@implements IDisposable
@if (NavigationActions != null && NavigationActions.Any())
{
    foreach (var navigationAction in NavigationActions)
    {
        string targetAttribute = navigationAction.OpenOnSeparatePage ? "_blank" : "_self";
        <li class="nav-item p-1">
            @if (navigationAction.ActionHttpMethod == System.Net.Http.HttpMethod.Get)
            {
                <NavLink href="@navigationAction.ActionUrl" target="@targetAttribute" class="nav-link btn btn-secondary h-auto">
                    @navigationAction.Title
                </NavLink>
            }
            else if (navigationAction.ActionHttpMethod == System.Net.Http.HttpMethod.Post)
            {
                <form method="@navigationAction.ActionHttpMethod" target="@targetAttribute" action="@navigationAction.ActionUrl">
                    <button type="submit" class="nav-link btn btn-secondary h-auto">
                        @navigationAction.Title
                    </button>
                </form>
            }
        </li>
    }
}

@code {
    private IEnumerable<ActionModel> NavigationActions { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationActionsModule.NavigationActionsChanged += NavigationActionsChanged;
    }

    private void NavigationActionsChanged(object sender, NavigationActionsModuleEventArgs e)
    {
        NavigationActions = e.NavigationActions;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        NavigationActionsModule.NavigationActionsChanged -= NavigationActionsChanged;
    }
}
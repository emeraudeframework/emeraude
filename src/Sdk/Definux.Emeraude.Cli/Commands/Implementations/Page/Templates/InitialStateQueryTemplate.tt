<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using AutoMapper;
using <#=Session["ProjectName"]#>.Application.Interfaces;
using MediatR;
using System.Threading;
using System.Threading.Tasks;

namespace <#=Session["ProjectName"]#>.Application.Requests.InitialStates.<#=Session["PageName"]#>
{
    public class <#=Session["PageName"]#>InitialStateQuery : IRequest<<#=Session["PageName"]#>ViewModel>
    {
        public class <#=Session["PageName"]#>InitialStateQueryHandler : IRequestHandler<<#=Session["PageName"]#>InitialStateQuery, <#=Session["PageName"]#>ViewModel>
        {
            private readonly IEntityContext context;
            private readonly IMapper mapper;

            public <#=Session["PageName"]#>InitialStateQueryHandler(IEntityContext context, IMapper mapper)
            {
                this.context = context;
                this.mapper = mapper;
            }

            public async Task<<#=Session["PageName"]#>ViewModel> Handle(<#=Session["PageName"]#>InitialStateQuery request, CancellationToken cancellationToken)
            {
                return new <#=Session["PageName"]#>ViewModel();
            }
        }
    }
}
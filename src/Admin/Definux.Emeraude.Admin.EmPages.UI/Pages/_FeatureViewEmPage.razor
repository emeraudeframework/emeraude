@page "/admin/{route}/{modelId}/{*featureRoute}"
@inherits EmPage<EmPageDetailsViewModel>
<PageTitle>@PageTitle | Emeraude</PageTitle>

@if (Feature != null)
{
    <DynamicComponent Type="@Feature.Component" Parameters="BuildParameters()"></DynamicComponent>
}

@code {
    [Parameter]
    public string ModelId { get; set; }
    
    [Parameter]
    public string FeatureRoute { get; set; }

    private EmPageDetailsFeatureModel Feature => ViewModel?.Features.FirstOrDefault(x => x.Context.Route.Equals(FirstSegment, StringComparison.OrdinalIgnoreCase));
    
    private string[] FeatureSegments => FeatureRoute?.Split('/') ?? new string[0];

    private string FirstSegment => FeatureSegments.FirstOrDefault();
    
    protected override string PageTitle => $"{Feature?.Context.Title} | {ViewModel?.Context.Title}";

    protected override IEnumerable<BreadcrumbItemModel> ConfigureBreadcrumbs() =>
        Feature?.Context.Breadcrumbs;

    protected override IEnumerable<ActionModel> ConfigureNavigationActions() =>
        Feature?.Context.NavbarActions;

    protected override async Task<EmPageDetailsViewModel> RetrieveViewModelAsync() =>
        await EmPageManager.RetrieveDetailsViewModelAsync(Route, ModelId, GetQueryParameters());

    protected override async Task ReloadPageAsync()
    {
        if (string.IsNullOrWhiteSpace(FirstSegment))
        {
            NavigationManager.NavigateToNotFoundPage();
            return;
        }

        await base.ReloadPageAsync();
    }

    private IDictionary<string, object> BuildParameters()
    {
        return new Dictionary<string, object>
        {
            { nameof(EmPageFeature.FeatureRouteSegments), FeatureSegments.Skip(1).ToArray() },
            { nameof(EmPageFeature.DetailsViewModel), ViewModel },
            { nameof(EmPageFeature.Feature), Feature },
        };
    }
}
@page "/admin/{route}/{modelId}/{*featureRoute}"
@inherits EmPage
<PageTitle>@PageTitle | Emeraude</PageTitle>


@code {
    [Parameter]
    public string ModelId { get; set; }
    
    [Parameter]
    public string FeatureRoute { get; set; }

    private EmPageDetailsViewModel ViewModel { get; set; }
    
    private EmPageDetailsFeature Feature => ViewModel?.Features.FirstOrDefault(x => x.Context.Route.Equals(FirstSegment, StringComparison.OrdinalIgnoreCase));
    
    private string[] FeatureSegments => FeatureRoute?.Split('/') ?? new string[0];

    private string FirstSegment => FeatureSegments.FirstOrDefault();
    
    private string PageTitle => $"{Feature?.Context.Title} | {ViewModel?.Context.Title}";

    protected override IEnumerable<BreadcrumbItemModel> ConfigureBreadcrumbs()
        => Feature?.Context.Breadcrumbs ?? new List<BreadcrumbItemModel>();

    protected override IEnumerable<ActionModel> ConfigureNavigationActions()
        => Feature?.Context.NavbarActions ?? new List<ActionModel>();
    
    private void ResetData()
    {
        ViewModel = null;
        StateHasChanged();
    }
    
    protected override async Task ReloadPageAsync()
    {
        ResetData();

        if (string.IsNullOrWhiteSpace(FirstSegment))
        {
            NavigationManager.NavigateToNotFoundPage();
            return;
        }

        var viewModel = await EmPageManager.RetrieveDetailsViewModelAsync(Route, ModelId, GetQueryParameters());
        if (viewModel == null)
        {
            NavigationManager.NavigateToNotFoundPage();
            return;
        }

        ViewModel = viewModel;
        StateHasChanged();
    }

    private IDictionary<string, object> BuildParameters()
    {
        return new Dictionary<string, object>
        {
            { "Route", FeatureSegments?[0] }
        };
    }
}
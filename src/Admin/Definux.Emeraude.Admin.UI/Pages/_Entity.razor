@page "/admin/{entityKey}/{entityId}"
@using Definux.Emeraude.Admin.UI.Adapters
@inherits AdminPage
@inject IEmPageSchemaProvider EntitiesViewsSchemaProvider;
<PageTitle>@PageTitle | Emeraude</PageTitle>

@if (Loaded)
{
    <EmPagesDetailsView ViewSchema="ViewSchema"/>
}
else
{
    <LoadingIndicator/>
}

@code {
    private string entityKey;
    private EmPageDetailsViewSchema ViewSchema { get; set; }
    
    [Parameter]
    public string EntityKey { get; set; }

    [Parameter]
    public string EntityId { get; set; }

    private bool FirstInitial { get; set; }
    
    private string PageTitle => ViewSchema?.Context.Title;
    
    private bool Loaded => FirstInitial && ViewSchema != null;
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (!(this.entityKey ?? string.Empty).Equals(EntityKey, StringComparison.OrdinalIgnoreCase))
        {
            this.entityKey = EntityKey;
            await LoadViewSchemaAsync();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            FirstInitial = true;
            StateHasChanged();
        }
    }
    
    protected override IEnumerable<BreadcrumbItemModel> ConfigureBreadcrumbs()
        => this.ViewSchema?.Breadcrumbs ?? new List<BreadcrumbItemModel>();

    protected override IEnumerable<ActionModel> ConfigureNavigationActions()
        => this.ViewSchema?.NavbarActions ?? new List<ActionModel>();
    
    protected override async Task OnInitializedAsync()
    {
        this.entityKey = EntityKey;
        await this.LoadViewSchemaAsync();
        await base.OnInitializedAsync();
    }

    protected override async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await this.LoadViewSchemaAsync();
    }

    private async Task LoadViewSchemaAsync()
    {
        this.ViewSchema = await EntitiesViewsSchemaProvider.GetDetailsViewSchemaAsync(EntityKey);
        if (this.ViewSchema == null)
        {
            NavigationManager.NavigateTo("/error/404", true, true);
            return;
        }
        
        this.StateHasChanged();
        ReloadBreadcrumbs();
        ReloadNavigationActions();
    }
}
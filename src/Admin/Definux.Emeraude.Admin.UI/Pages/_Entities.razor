@page "/admin/{entityKey}"
@using Definux.Emeraude.Admin.UI.Adapters
@using System.Net.Http
@inherits AdminPage
@inject IEmPageSchemaProvider EntitiesViewsSchemaProvider;
@inject IEmPageServiceAgent EmPageServiceAgent;
<PageTitle>@PageTitle | Emeraude</PageTitle>
@if (Loaded)
{
    <EmPagesTableView ViewSchema="ViewSchema" ViewData="ViewData" />
}
else
{
    <LoadingIndicator/>
}

@code {
    private string entityKey;
    private EmPageTableViewSchema ViewSchema { get; set; }
    private EmPageTableViewData ViewData { get; set; }
    private bool FirstInitial { get; set; }
    private bool Loaded => FirstInitial && ViewSchema != null && ViewData != null;

    [Parameter]
    public string EntityKey { get; set; }

    private string PageTitle => ViewSchema?.Context.Title;
    
    protected override async Task OnInitializedAsync()
    {
        this.entityKey = EntityKey;
        await LoadViewParametersAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (!(this.entityKey ?? string.Empty).Equals(EntityKey, StringComparison.OrdinalIgnoreCase))
        {
            this.entityKey = EntityKey;
            await LoadViewParametersAsync();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            FirstInitial = true;
            StateHasChanged();
        }
    }

    protected override IEnumerable<BreadcrumbItemModel> ConfigureBreadcrumbs()
        => this.ViewSchema?.Breadcrumbs ?? new List<BreadcrumbItemModel>();

    protected override IEnumerable<ActionModel> ConfigureNavigationActions()
        => this.ViewSchema?.NavbarActions ?? new List<ActionModel>();

    private void ResetData()
    {
        ViewSchema = null;
        ViewData = null;
        StateHasChanged();
    }

    protected override async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadViewParametersAsync();
    }

    private async Task LoadViewParametersAsync()
    {
        ResetData();
        ViewSchema = await EntitiesViewsSchemaProvider.GetTableViewSchemaAsync(EntityKey);
        if (ViewSchema == null)
        {
            NavigationManager.NavigateTo("/error/404", true, true);
        }
        else
        {
            var queryString = new Uri(NavigationManager.Uri).Query;
            ViewData = await EmPageServiceAgent.RetrieveTableViewDataAsync(EntityKey, queryString, ViewSchema);
        }

        StateHasChanged();
        ReloadBreadcrumbs();
        ReloadNavigationActions();
    }
}
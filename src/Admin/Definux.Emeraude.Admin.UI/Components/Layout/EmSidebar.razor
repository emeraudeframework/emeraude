@using Definux.Emeraude.Admin.UI.Adapters
@using Definux.Emeraude.Admin.UI.ViewModels.Layout.AdminMenus
@inject IAdminMenusBuilder AdminMenusBuilder
@inject NavigationManager NavigationManager

<nav class="sidebar sidebar-offcanvas" id="sidebar">
    <ul class="nav">
        <li class="nav-item nav-profile">
            <div class="nav-link">
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownAppInstance" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Application Insights</button>
                    <div class="dropdown-menu mt-2 p-2" aria-labelledby="dropdownAppInstance">
                        <a class="dropdown-item pt-2 pb-2 pl-1" target="_blank" href="/"><i class="mr-2 mdi mdi-home"></i> Home Page</a>
                        @* @if (navigationScheme.InsightsItems != null && navigationScheme.InsightsItems.Count > 0) *@
                        @* { *@
                        @*     <div class="dropdown-divider"></div> *@
                        @*     foreach (var item in navigationScheme.InsightsItems) *@
                        @*     { *@
                        @*         string targetBlank = item.Blank ? "target=\"_blank\"" : string.Empty; *@
                        @*         string iconMargin = item.IsButton ? string.Empty : " mr-2"; *@
                        @*         string icon = !string.IsNullOrWhiteSpace(item.Icon) ? $"<i class=\"{item.Icon}{iconMargin}\"></i> " : string.Empty; *@
                        @*         if (!item.IsButton) *@
                        @*         { *@
                        @*             <a class="dropdown-item pt-2 pb-2 pl-1" href="@item.Route" @targetBlank>@Html.Raw(icon)@item.Title</a> *@
                        @*         } *@
                        @*         else *@
                        @*         { *@
                        @*             <a class="btn btn-primary btn-block d-block" href="@item.Route" @targetBlank>@Html.Raw(icon)@item.Title</a> *@
                        @*         } *@
                        @*     } *@
                        @* } *@
                        @* <div class="dropdown-divider"></div> *@
                        @* <span class="dropdown-header">SEO</span> *@
                        @* <a class="dropdown-item pt-2 pb-2 pl-1" target="_blank" href="/robots.txt"><i class="mr-2 mdi mdi-robot"></i> robots.txt</a> *@
                        @* <a class="dropdown-item pt-2 pb-2 pl-1" target="_blank" href="/sitemap.xml"><i class="mr-2 mdi mdi-sitemap"></i> Sitemap</a> *@
                        @* <for-permission permission="@AdminPermissions.AccessLogs"> *@
                        @*     <div class="dropdown-divider"></div> *@
                        @*     <span class="dropdown-header">Logging</span> *@
                        @*     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/activity"><i class="mr-2 mdi mdi-cursor-default-click"></i> Activity</a> *@
                        @*     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/errors"><i class="mr-2 mdi mdi-bug"></i> Errors</a> *@
                        @*     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/emails"><i class="mr-2 mdi mdi-email"></i> Emails</a> *@
                        @*     <a class="dropdown-item pt-2 pb-2 pl-1" href="/admin/logging/temp-files"><i class="mr-2 mdi mdi-file-upload"></i> Temp Files</a> *@
                        @* </for-permission> *@
                        @* @if (HostingEnvironment.IsDevelopment()) *@
                        @* { *@
                        @*     <div class="dropdown-divider"></div> *@
                        @*     <span class="dropdown-header">Development</span> *@
                        @*     <a class="dropdown-item pt-2 pb-2 pl-1" href="https://emeraude.dev/" target="_blank"><i class="mr-2 mdi mdi-file-document"></i> Documentation</a> *@
                        @*     if (OptionsProvider.GetOptionValue<bool>("ClientBuilderOptions:EnableClientBuilder")) *@
                        @*     { *@
                        @*         <div class="dropdown-divider"></div> *@
                        @*         <a href="/admin/client-builder/scaffold" class="btn btn-primary btn-block d-block">Client Builder</a> *@
                        @*     } *@
                        @* } *@
                    </div>
                </div>
            </div>
        </li>
        @{
            
            int sectionIndex = 1;
            foreach (var menuSection in navigationScheme.Menus)
            {
                <EmMenuSection MenuSection="menuSection" Index="sectionIndex"/>
                sectionIndex++;
            }
        }
        <li class="nav-item main-nav-item">
            <a id="sidebar-collapse-btn" href="javascript:void(0)" class="nav-link" data-toggle="minimize" title="Collapse Menu"><i class="menu-icon mdi mdi-arrow-left-drop-circle"></i><span class="menu-title">Collapse Menu</span></a>
        </li>
    </ul>
</nav>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private AdminNavigationSchema navigationScheme;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += (_, args) => this.navigationScheme.ChangeNavigationState(NavigationManager.ToBaseRelativePath(args.Location));
        this.navigationScheme = await this.AdminMenusBuilder.BuildAsync();
        this.navigationScheme.ChangeNavigationState(NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
    }
}
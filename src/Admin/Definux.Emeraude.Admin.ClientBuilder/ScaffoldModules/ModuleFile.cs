using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Definux.Emeraude.Admin.ClientBuilder.ScaffoldModules
{
    /// <summary>
    /// Implementaion of file which will be generated by the client builder.
    /// </summary>
    public class ModuleFile
    {
        /// <summary>
        /// Name of the file with extension.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Relative path of the file.
        /// </summary>
        public string RelativePath { get; set; }

        /// <summary>
        /// Type of the T4 template that contains the layout of the file.
        /// </summary>
        [JsonIgnore]
        public Type TemplateType { get; set; }

        /// <summary>
        /// Unique identifier of the file in case of generation files with same layouts and different parameters.
        /// </summary>
        public string ReferenceId { get; set; }

        /// <summary>
        /// Render function of the module file that returns the content of the file.
        /// </summary>
        [JsonIgnore]
        public Func<ModuleFile, string> RenderFunction { get; set; }

        /// <summary>
        /// Renders the loaded template with specified session dictionary (parameters of the template).
        /// </summary>
        /// <param name="sessionDictionary"></param>
        /// <returns></returns>
        public string RenderTemplate(Dictionary<string, object> sessionDictionary)
        {
            return TemplateRenderer.RenderTemplate(this.TemplateType, sessionDictionary);
        }

        /// <summary>
        /// Renders the loaded template without session dictionary (parameters of the template).
        /// </summary>
        /// <returns></returns>
        public string RenderTemplate()
        {
            return TemplateRenderer.RenderTemplate(this.TemplateType, new Dictionary<string, object>());
        }
    }
}
